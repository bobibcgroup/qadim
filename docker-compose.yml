version: '3.8'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: qadim-postgres
    environment:
      POSTGRES_DB: qadim
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    container_name: qadim-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: qadim-minio
    environment:
      MINIO_ROOT_USER: qadim
      MINIO_ROOT_PASSWORD: qadim123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Next.js application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: qadim-web
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:password@postgres:5432/qadim?schema=public
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # S3 (MinIO)
      S3_ENDPOINT: http://minio:9000
      S3_REGION: us-east-1
      S3_ACCESS_KEY_ID: qadim
      S3_SECRET_ACCESS_KEY: qadim123
      S3_BUCKET_NAME: qadim-documents
      
      # NextAuth
      NEXTAUTH_SECRET: your-nextauth-secret-key-change-in-production
      NEXTAUTH_URL: http://localhost:3000
      
      # Google OAuth (set these in production)
      GOOGLE_CLIENT_ID: your-google-client-id
      GOOGLE_CLIENT_SECRET: your-google-client-secret
      
      # OpenAI
      OPENAI_API_KEY: your-openai-api-key
      
      # Feature Flags
      FEATURE_DEBATE_MODE: true
      FEATURE_TIMELINE_MODE: true
      FEATURE_COMMUNITY_NOTES: true
      FEATURE_ADS: false
      
      # App Config
      APP_ENV: production
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./prisma:/app/prisma
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # BullMQ Worker for background jobs
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: qadim-worker
    environment:
      # Same environment variables as web service
      DATABASE_URL: postgresql://postgres:password@postgres:5432/qadim?schema=public
      REDIS_URL: redis://redis:6379
      S3_ENDPOINT: http://minio:9000
      S3_REGION: us-east-1
      S3_ACCESS_KEY_ID: qadim
      S3_SECRET_ACCESS_KEY: qadim123
      S3_BUCKET_NAME: qadim-documents
      OPENAI_API_KEY: your-openai-api-key
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./prisma:/app/prisma

volumes:
  postgres_data:
  redis_data:
  minio_data:
