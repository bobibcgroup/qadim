// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enable pgvector extension
// Note: _prisma_migrations table is automatically managed by Prisma

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  name       String?
  image      String?
  role       UserRole  @default(USER)
  persona    Persona   @default(NEUTRAL)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  // Relations
  questions       Question[]
  community_notes CommunityNote[]
  accounts        Account[]
  sessions        Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Source {
  id             String           @id @default(uuid())
  authority_level AuthorityLevel
  status         SourceStatus     @default(UNVERIFIED)
  title          String
  publisher      String?
  url            String?
  lang           Language
  year           Int?
  credibility    Int              @default(50)
  provenance     Json?
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt

  // Relations
  docs    Doc[]

  @@map("sources")
}

model Doc {
  id           String    @id @default(uuid())
  source_id    String
  title        String
  content      String    @db.Text
  embedding    String? // Will be stored as text, converted to vector in queries
  lang         Language
  published_at DateTime?
  created_at   DateTime  @default(now())

  // Relations
  source Source @relation(fields: [source_id], references: [id], onDelete: Cascade)

  @@map("docs")
}

model Question {
  id         String    @id @default(uuid())
  user_id    String?
  text       String    @db.Text
  lang       Language  @default(EN)
  created_at DateTime  @default(now())

  // Relations
  user   User?   @relation(fields: [user_id], references: [id], onDelete: SetNull)
  answers Answer[]

  @@map("questions")
}

model Answer {
  id           String    @id @default(uuid())
  question_id  String
  summary      String    @db.Text
  citations    Json      // Array of citation objects
  confidence   Int
  controversy  Int
  persona      Persona
  created_at   DateTime  @default(now())

  // Relations
  question        Question        @relation(fields: [question_id], references: [id], onDelete: Cascade)
  community_notes CommunityNote[]

  @@map("answers")
}

model CommunityNote {
  id              String           @id @default(uuid())
  user_id         String
  target_answer_id String
  note            String           @db.Text
  citations       Json?            // Array of citation objects
  status          CommunityStatus  @default(PENDING)
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt

  // Relations
  user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  answer Answer @relation(fields: [target_answer_id], references: [id], onDelete: Cascade)

  @@map("community_notes")
}

// Enums
enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum Persona {
  NEUTRAL
  ZAATAR
}

enum AuthorityLevel {
  OFFICIAL
  SCHOLARLY
  PRESS
  COMMUNITY
  CLAIM
}

enum SourceStatus {
  VERIFIED
  UNVERIFIED
  CONTESTED
}

enum Language {
  AR
  EN
  FR
}

enum CommunityStatus {
  PENDING
  APPROVED
  REJECTED
}

// Answer citations are stored as JSON in the citations field